/*
Rooks
Time Limit: 2000MS 		Memory Limit: Unknown 		64bit IO Format: %lld & %llu

[Submit]   [Go Back]   [Status]  

Description
Problem A: Rooks
You have unexpectedly become the owner of a large chessboard, having fifteen squares to each side. Because you do not know how to play chess on such a large board, you find an alternative way to make use of it.

In chess, a rook attacks all squares that are in the same row or column of the chessboard as it is. For the purposes of this problem, we define a rook as also attacking the square on which it is already standing.

Given a set of chessboard squares, how many rooks are needed to attack all of them?

Input Specification
Input consists of a number of test cases. Each test case consists of fifteen lines each containing fifteen characters depicting the chess board. Each character is either a period (.) or a hash (#). Every chessboard square depicted by a hash must be attacked by a rook. After all the test cases, one more line of input appears. This line contains the word END.
Sample Input

...............
...............
...............
...............
...............
...............
...............
.......#.......
...............
...............
...............
...............
...............
...............
...............
END

Output Specification
Output consists of exactly one line for each test case. The line contains a single integer, the minimum number of rooks that must be placed on the chess board so that every square marked with a hash is attacked.
Output for Sample Input

1
*/

/*
 *  235308	030902414	UVA 11699	Accepted	0 KB	168 ms	C++ 4.1.2	994 B	2011-10-03 20:12:00
 * 题意：给定一个15*15的棋盘，棋盘上有若干个#，要求放入最少的棋子使得每个#都被攻击到，每个棋子可攻击到其所在的行和列。
 * 解： 枚举每一行是否放，共2^15种结果，对于每种结果，ansn=max（k，cnt）；k为放了几行，cnt为除去这些棋子所在的行被攻击的#外，还有多少个列有棋子。
 * （注意，有放旗子的行那个棋子可以再选择任意一列进行攻击！）
 * 最后答案为   ans=min(ansn);
 */
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int n=15;
char g[20][20];
int col[20],ans;
void dfs(int row,int k){
    int i;
    if(row==n){
        int cnt=0;
        for(i=0;i<n;++i){
            if(col[i])
                ++cnt;
        }
        ans=min(ans,max(k,cnt));
        return ;
    }
    dfs(row+1,k);
    bool flag=0;
    for(i=0;i<n;++i){
        if(g[row][i]=='#')
        {
            col[i]--;
            flag=1;
        }
    }
    if(flag){
        dfs(row+1,k+1);
        for(i=0;i<n;++i)
        if(g[row][i]=='#')
            col[i]++;
    }
}
int main(){
  //  freopen("in","r",stdin);
    while(~scanf(" %s",g[0]) && g[0][0]!='E'){
        int i,j;
        for( i=1;i<n;++i)
            scanf(" %s",g[i]);
        memset(col,0,sizeof(col));
        for(i=0;i<n;++i)
            for(j=0;j<n;++j){
                if(g[i][j]=='#'){
                    col[j]++;
                }
            }
        ans=15;
        dfs(0,0);
        printf("%d\n",ans);
    }
    return 0;
}
