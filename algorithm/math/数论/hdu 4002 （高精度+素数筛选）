/*
 * 4538856	2011-09-04 01:10:25	Accepted	4002	828MS	1500K	3117 B	C++	kite
*/
/*
 * File:   main.cpp
 * Author: etaf
 *
 * Created on 2011年8月11日, 下午8:49
 */
#include<cstdio>
#include <cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<bitset>
using namespace std;
const int N=1000010;
bool isprime[N];
int prime[N];
char str[1000];
typedef long long llong;
const int DIGIT = 4; //
const int BASE = 10000; //

const int MAX = 30; //
char buf[MAX * DIGIT];

struct BigInt {
    int Data[MAX], Len, sgn;

    BigInt(int v = 0) {
        if (v == 0) {
            Len = 1;
            Data[1] = 0;
        }
        for (Len = 0; v; v /= BASE) Data[Len++] = v % BASE;
    }

    BigInt(const BigInt & V) : Len(V.Len) {
        memcpy(Data, V.Data, Len * sizeof (int));
    }

    BigInt & operator=(int v) {
        if (v == 0) {
            Len = 1;
            Data[1] = 0;
            return *this;
        }
        for (Len = 0; v; v /= BASE) Data[Len++] = v % BASE;
        return *this;
    }

    BigInt & operator=(const BigInt & V) {
        Len = V.Len;
        memcpy(Data, V.Data, Len * sizeof (int));
        return * this;
    }

    int &operator[](int index) {
        return Data[index];
    }

    int operator[](int index) const {
        return Data[index];
    }
};

int comp(const BigInt &A, const BigInt &B) {
    if (A.Len != B.Len) return A.Len > B.Len ? 1 : -1;
    int i;
    for (i = A.Len - 1; i > 0 && A[i] == B[i]; i--);
    return A[i] - B[i];
}

BigInt operator*(const BigInt &A, const int &B) {
    int i;
    llong Carry(0);
    BigInt R;
    for (i = 0; i < A.Len || Carry > 0; i++) {
        if (i < A.Len) Carry += llong(A[i]) * B;
        R[i] = Carry % BASE;
        Carry /= BASE;
    }
    R.Len = i;
    return R;
}

int read(BigInt &A, char buf[]) { //
    if (1 != scanf(" %s", buf)) return 0;
    int w, u, v, ln = strlen(buf);
    memset(&A, 0, sizeof (BigInt));
    for (v = 0; v < ln - 1 && buf[v] == '0'; ++v);
    if (buf[v] == '-') A.sgn = -1, ++v;
    else A.sgn = 1;
    for (w = 1, u = 0; ln > v;) {
        u += (buf[--ln] - '0') * w;
        if (w * 10 == BASE) A[A.Len++] = u, u = 0, w = 1;
        else w *= 10;
    }
    if (w != 1) A[A.Len++] = u;
    return 1;
}

void write(const BigInt &A) {
    int i;
    printf("%d", A[A.Len - 1]);
    for (i = A.Len - 2; i >= 0; --i) printf("%0*d", DIGIT, A[i]);
}


int main()
{
    freopen("in","r",stdin);
    int i,j;
    int k=sqrt(double(N));
    for(i=2;i<k;++i)
    {
        for(j=i;j*i<N;++j)
            isprime[j*i]=1;
    }
    j=0;
    for(i=2;i<N;++i)
        if(!isprime[i])
        {
            prime[j++]=i;
       
        }
    int T;
    while(scanf("%d",&T)!=EOF)
    {
        while(T--)
        {
            BigInt a,b;
            read(a,str);
            b=1;
            i=0;
            while(comp(a,b*prime[i])>=0)
                b=b*prime[i++];
            write(b);
            puts("");
        }
    }
    return 0;
}
