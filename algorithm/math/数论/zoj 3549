/*
*
	Little Keng
Time Limit: 2 Seconds      Memory Limit: 65536 KB
Calculate how many 0s at the end of the value below:
1n + 2n + 3n + ... + mn

Input

There are multiple cases. For each cases, the input containing two integers m, n. (1 <= m <= 100 , 1 <= n <= 1000000)

Output

One line containing one integer indicatint the number of 0s.

Sample Input

4 3

Sample Output

2

不懂怎么证明最多的0的个数不会超过9个。。
*/

#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
using namespace std;
typedef long long ll;
#define M 1000000000//求余的余数若超出int型会wa。
//const  int M=100000000;   这样会wa，不知到为什么。
ll PowerMod(ll a,int b){
	ll res=1;
	while(b){

		if(b&1)
		  res=(res*a)%M;
		a=(a*a)%M;
		b>>=1;
	}
	return res;
}
int main(){

	int n,m,i;
	ll ans;
	int cnt;
	while(scanf("%d%d",&m,&n)!=EOF){
		ans=0;
		cnt=0;
		for(i=1;i<=m;++i)
		{
                    ans+=PowerMod(i,n);
		 //     ans=(ans+PowerMod(i,n))%M;
		}
		while(ans%10==0){

			++cnt;
			ans/=10;
		}
		printf("%d\n",cnt);
	}
	return 0;
}

