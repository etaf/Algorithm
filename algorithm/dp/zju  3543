/*
 *  2011-10-03 22:19:00 	C++ 	310 	196 	FZU_07
 *  题意：给定一个序列，序列由 I 和 D 和 ？ 组成，如 IDI？，表示一个由 1，2，3，4组成的序列。I（increase）表示前一个比当前值小，
 *       D（decrease）表示前一个比当前值大。求符合要求的排列数。
 *       状态为： dp[i][j]表示 前i个以j结尾的排列数，(j<=i).
 *       状态转移： 第i个字母为D：  dp[i][j]=sigma(dp[i-1][k])  j<=k<=i-1;
 *                第i个字母为I：  dp[i][j]=sigma(dp[i-1][k])  1<=k<j;
 *                第i个字母为？：  dp[i][j]=sigma(dp[i-1][k])   1<=k<=i-1;
 *       说明：    比如第i个字母为D，i=6，j=3：则 x x x x 3 6 对应了 x x x x 6 3 的排列数。
 *                                           x 3 x x 4 6 对应了 x x x x 4 3 的排列数。
 *                                           x 3 x x 5 6 对应了 x x x x 5 3 的排列数。
 *               即交换6和3后排列数一样。那么要求dp[i][j]就等价于求 sigma(dp[i-1][k])  j<=k<=i-1;
 *               比如第i个字母为I， i=6，j=3； 则 3 x x x 1 6 对应了 x x x x 1 3 的排列数。
 *               依次类推。。。。 
 *                  
 */

#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
#define P 1000000007
const int N=1010;
char op[N];
int sum[2][N];
int main(){
    freopen("in","r",stdin);
    int i,j,c,n,dp;
    while(scanf("%s",op)!=EOF){
        memset(sum,0,sizeof(sum));
        n=strlen(op)+1;
        sum[1][1]=1;
       // for(j=1;j<=n;++j)    printf("%d ",sum[1][j]); printf("\n");
        for(i=2,c=0;i<=n;++i,c=1-c){
            if(op[i-2]=='D'){
                for(j=1;j<=i;++j){
                    dp=(sum[1-c][i-1]-sum[1-c][j-1]+P)%P;
                    sum[c][j]=(sum[c][j-1]+dp)%P;
                }
            }else if(op[i-2]=='I'){
                for(j=1;j<=i;++j){
                    sum[c][j]=(sum[c][j-1]+sum[1-c][j-1])%P;
                }

            }else
            {
                for(j=1;j<=i;++j){
                    sum[c][j]=(sum[c][j-1]+sum[1-c][i-1])%P;
                }
            }
            
          //  for(j=1;j<=n;++j)    printf("%d ",sum[c][j]);printf("\n");
        }
        printf("%d\n",sum[1-c][n]);

    }
    return 0;
}
