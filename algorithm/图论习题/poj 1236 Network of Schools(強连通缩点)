/*
 * 9356603	030902414	1236	Accepted	692K	16MS	G++	1885B	2011-09-24 22:00:59
 * 题意；给定一个有向图，1）问从最少的几点开始可以到达所有点。2）加最少的几条边可以把图变成一个強连通图。
 * 解：  強连通缩点，1）统计入度为0的点的个数即为答案。 2) 统计出度为0 的点与入度为0 的点的个数，取较大值。
 * 注意：当只有一个联通分量的时候答案为0而不是1；
 */
#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
using namespace std;
const int N=110;
int n;
vector<int> g[N];
int st[N],dep[N],low[N],vis[N],belg[N];
void dfs(int u,int &sig,int &scc_num){
    vis[u]=1;
    st[++st[0]]=u;
    dep[u]=low[u]=sig++;
    int i,v;
    for(i=0;i<g[u].size();++i){
        v=g[u][i];
        if(!vis[v]){
            dfs(v,sig,scc_num);
            if(low[u]>low[v])
                low[u]=low[v];
        }
        if(vis[v]==1 && low[u]>dep[v])
            low[u]=dep[v];
    }
    if(low[u]==dep[u]){
        ++scc_num;
        do{
            belg[st[st[0]]]=scc_num;
            vis[st[st[0]]]=2;
        }while(st[st[0]--]!=u);

    }
}
int targan_scc(){
    int sig=0,scc_num=0,i;
    st[0]=0;
    memset(vis,0,sizeof(vis));
    for(i=1;i<=n;++i)
        if(!vis[i])
            dfs(i,sig,scc_num);
    return scc_num;
}
int main(){
    freopen("in","r",stdin);
    int i,j;
    scanf("%d",&n);
    for(i=1;i<=n;++i)g[i].clear();
    for(i=1;i<=n;++i){
        while(scanf("%d",&j) && j){
            g[i].push_back(j);
        }
    }
    int num=targan_scc();
    if(num==1){
        printf("1\n0\n");
        return 0;
    }
    int out[N],in[N];
    memset(out,0,sizeof(out));
    memset(in,0,sizeof(in));
    for(i=1;i<=n;++i){
        for(j=0;j<g[i].size();++j){
            if(belg[g[i][j]]!=belg[i])
                ++out[belg[i]],++in[belg[g[i][j]]];
        }
    }
    int out0,in0;
    out0=in0=0;
   /* for(i=1;i<=num;++i)printf("%d ",in[i]);
    printf("\n");
    for(i=1;i<=num;++i)printf("%d ",out[i]);
    printf("\n");
   
    for(i=1;i<=n;++i)
        printf("%d ",belg[i]);
    printf("\n");
     */
    for(i=1;i<=num;++i){
        if(in[i]==0)++in0;
        if(out[i]==0)++out0;
    }
   
    printf("%d\n%d\n",in0,max(in0,out0));
    return 0;
}
