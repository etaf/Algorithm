/*
 *  9357477	030902414	2762	Accepted	796K	344MS	G++	2217B	2011-09-25 09:18:05
 * 题意：给定一个有向图，判断是否任意两点u.v都有（ u可达v或v可达u ） 若满足条件输出yes，否则no。
 * 题解：先強连通缩点，转化成有向无环图，然后判断是否有唯一的拓扑排序。
 * 判断是否有唯一的拓扑排序：
 * step1：统计入度，找出所有入度为0的点，若存在>1个点则拓扑排序不唯一，因为不知到要选那一个度为0的点。
 * step2: 利用选出的那个度为0的点，把从他出发的弧删掉，更新所有点的入度。转step1.
 */
#include<cstring>
#include<cstdio>
#include<vector>
using namespace std;
const int N=1010;
int n,m,num;
vector<int> g[N];
int dep[N],low[N],vis[N],st[N],belg[N],in[N];
void dfs_scc(int u,int &sig,int &scc_num){
    int i,v;
    vis[u]=1;
    dep[u]=low[u]=sig++;
    st[++st[0]]=u;
    for(i=0;i<g[u].size();++i){
        v=g[u][i];
        if(!vis[v]){
            dfs_scc(v,sig,scc_num);
            if(low[u]>low[v])
                low[u]=low[v];
        }
        if(vis[v]==1 && low[u]>dep[v])
            low[u]=dep[v];
    }
    if(dep[u]==low[u]){
        ++scc_num;
        do{
            belg[st[st[0]]]=scc_num;
            vis[st[st[0]]]=2;
        }while(st[st[0]--]!=u);
    }

}
int targan_scc(){
    int i,sig=0,scc_num=0;
    memset(vis,0,sizeof(vis));
    for(i=1;i<=n;++i)
        if(!vis[i])
            dfs_scc(i,sig,scc_num);
    return scc_num;
}

bool judge() {
    int i, j, k, u;
    memset(in, 0, sizeof (in));
    memset(vis, 0, sizeof (vis));
    int cnt = 0;
    for (i = 1; i <= n; ++i) {
        for (j = 0; j < g[i].size(); ++j) {
            if (belg[i] != belg[g[i][j]])
                ++in[belg[g[i][j]]];
        }
    }
    for (i = 1; i <= num; ++i) {
        cnt = 0;
        for (j = 1; j <= num; ++j)
            if (!vis[j]) {
                if (in[j] == 0) {
                    ++cnt;
                    u = j;
                    if (cnt > 1)
                        return false;
                }
            }
        for (j = 1; j <= n; ++j) {
            if (belg[j] ==u)
                for (k = 0; k < g[j].size(); ++k)
                    --in [belg[g[j][k]]];
        }
        vis[u] = 1;

    }
return true;
}
int main(){
    freopen("in","r",stdin);
    int T,i,j,u,v;
    scanf("%d",&T);
    while(T--){
        scanf("%d%d",&n,&m);
        for(i=1;i<=n;++i)
            g[i].clear();
        while(m--){
            scanf("%d%d",&u,&v);
            g[u].push_back(v);
        }
        num=targan_scc();
      /*  for(i=1;i<=n;++i)
            printf("%d ",belg[i]);
        printf("\n");
       */
        puts(judge()?"Yes":"No");
       
    }
    return 0;
}
