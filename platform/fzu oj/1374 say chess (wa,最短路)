#include<stdio.h>
#include<math.h>
#define N 110
#define INIF 0x3fffffff
struct hole
{
    double x,y, z;
}a[N];
double R[N],w[N][N];
double Distance(const struct hole &p,const struct hole &q)
{return sqrt((p.x-q.x)*(p.x-q.x)+(p.y-q.y)*(p.y-q.y)+(p.z-q.z)*(p.z-q.z));}
double dist[N];
int Q[N];
double Dijkstra(int s,int t,int n)
{
    int i,j,u,top=n,best;
    for(i=0;i<n;i++)
    {
        dist[i]=INIF;
        Q[i]=i;
    }
    dist[s]=0;
    for(i=0;i<n;i++)
    {
            for(best=0,j=1;j<top;j++)if(dist[Q[best]]>dist[Q[j]])best=j;
            u=Q[best];
            if(u==t)return dist[t];
            Q[best]=Q[--top];
            for(j=0;j<top;++j)if(dist[u]+w[u][Q[j]]<dist[Q[j]])
                dist[Q[j]]=dist[u]+w[u][Q[j]];

    }
  

    return dist[t];

}
int main()
{
    int n,i,j,cases=1;
    double tmp;
    while(scanf("%d",&n) && n!=-1)
    {
        for(i=0;i<n;i++)
            scanf("%lf%lf%lf%lf",&a[i].x,&a[i].y,&a[i].z,&R[i]);
        scanf("%lf%lf%lf%lf%lf%lf",&a[n].x,&a[n].y,&a[n].z,&a[n+1].x,&a[n+1].y,&a[n+1].z);
        R[n]=R[n+1]=0;
        n+=2;
        for(i=0;i<n;i++)
            for(j=0;j<i;j++)
            {
                tmp=Distance(a[i],a[j])-R[i]-R[j];
                w[i][j]=w[j][i]=tmp>0?tmp:0;
            }
        printf("Cheese %d: Travel time = %.0lf sec\n",cases++,Dijkstra(n-2,n-1,n)*10+0.5);
    }
    
    return 0;
}
