/*
 * 给定一个网络（可能有重边）要求找出一条回路，使得这条回路经过每一条边至少一次，且这条回路的权值之和最小。
 * 解：
 * 计算现有边的权总和=ans。
 * floyd求出所有点对的最短距离。
 * 首先构造欧拉图。找出所有奇度点（根据无向图的性质，无向图若有不存在奇数个奇度点），利用状态压缩dp+记忆化搜索
 * 求得奇度点两两匹配的最短权值之和。
 * dp过程：s的二进制表示一个点集，dp[s]表这个点集的最小匹配（点集里只有奇度点）。
 * dp[s]=min(dp[s-(1<<i)-(1<<j)]+w[i][j]);
 * 枚举点对i和j。
 */



#include<iostream>
#include<cstring>
#include<cstdio>
#include<vector>
#include<string>
#include<cmath>
#include<queue>
using namespace std;
int w[15][15],dp[1<<15],p[15],n,m;
int dfs(int s)
{
    if(dp[s]>-1)
        return dp[s];
    dp[s]=1<<29;
    int i,j;
    for(i=0;i<n;++i)
        if(s&(1<<i))
            for(j=i+1;j<n;++j)
            {
                if(s&(1<<j))
                {
                    int tmp=dfs(s-(1<<i)-(1<<j))+w[i][j];
                    if(dp[s]>tmp)
                        dp[s]=tmp;
                }
            }
    return dp[s];
}
void floyd()
{
    for(int k=0;k<n;k++)
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(k!=i && k!=j && i!=j && w[i][j]>w[i][k]+w[k][j])
                    w[i][j]=w[j][i]=w[i][k]+w[k][j];
}
int main()
{
    int i,j,x,y,z,ans;
    while(scanf("%d",&n) && n)
    {
        scanf("%d",&m);
        for(i=0;i<n;++i)
        {
            w[i][i]=0;
            for(j=0;j<i;++j)
                w[i][j]=w[j][i]=1<<29;
        }
        memset(p,0,sizeof(p));
        ans=0;
        for(i=0;i<m;++i)
        {
            scanf("%d%d%d",&x,&y,&z);
            --x;--y;
            if(w[x][y]>z)
                w[x][y]=w[y][x]=z;
            ++p[x];++p[y];
            ans+=z;
        }
        floyd();
        int now=0;
        for(i=0;i<n;i++)
            if(p[i]&1)
                now|=(1<<i);
        memset(dp,-1,sizeof(dp));
        dp[0]=0;
        printf("%d\n",ans+dfs(now));

    }
    return 0;
}
